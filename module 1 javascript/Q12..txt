Q12.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>AJAX & Fetch API Registration</title>
  <style>
    body { font-family: Arial; padding: 20px; max-width: 400px; }
    form { margin-bottom: 20px; }
    label, input { display: block; width: 100%; margin-bottom: 10px; }
    button { padding: 8px 12px; }
    #message { margin-top: 15px; font-weight: bold; }
    #message.success { color: green; }
    #message.error { color: red; }
  </style>
</head>
<body>

  <h1>User Registration</h1>

  <form id="regForm">
    <label>
      Name:
      <input type="text" name="name" required />
    </label>
    <label>
      Email:
      <input type="email" name="email" required />
    </label>
    <button type="submit">Submit</button>
  </form>

  <div id="message"></div>

  <script>
    const form = document.getElementById("regForm");
    const messageDiv = document.getElementById("message");

    // Mock API URL (doesn't actually exist)
    const MOCK_API_URL = "https://example.com/api/register";

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      messageDiv.textContent = "";
      messageDiv.className = "";

      const formData = new FormData(form);
      const data = {
        name: formData.get("name").trim(),
        email: formData.get("email").trim(),
      };

      // Simulate fetch POST with delayed response
      simulateFetchPost(MOCK_API_URL, data)
        .then(response => {
          messageDiv.textContent = " Registration successful!";
          messageDiv.className = "success";
          form.reset();
        })
        .catch(error => {
          messageDiv.textContent = "Registration failed. Please try again.";
          messageDiv.className = "error";
        });
    });

    // Simulate fetch POST with setTimeout delay
    function simulateFetchPost(url, data) {
      return new Promise((resolve, reject) => {
        console.log("Sending data to:", url, data);
        setTimeout(() => {
          // Simulate success or failure randomly
          const success = Math.random() > 0.3; // 70% chance success
          if (success) {
            resolve({ status: 200, message: "Success" });
          } else {
            reject({ status: 500, message: "Error" });
          }
        }, 2000); // 2 second delay
      });
    }
  </script>

</body>
</html>

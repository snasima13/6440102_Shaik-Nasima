Q13.
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Debuggable Registration Form</title>
  <style>
    body { font-family: Arial; padding: 20px; max-width: 400px; }
    form { margin-bottom: 20px; }
    label, input { display: block; width: 100%; margin-bottom: 10px; }
    button { padding: 8px 12px; }
    #message { margin-top: 15px; font-weight: bold; }
    #message.success { color: green; }
    #message.error { color: red; }
  </style>
</head>
<body>

  <h1>Debug Registration</h1>

  <form id="regForm">
    <label>
      Name:
      <input type="text" name="name" required />
    </label>
    <label>
      Email:
      <input type="email" name="email" required />
    </label>
    <button type="submit">Submit</button>
  </form>

  <div id="message"></div>

  <script>
    const form = document.getElementById("regForm");
    const messageDiv = document.getElementById("message");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Step 1: Log form submit triggered
      console.log("Form submission started");

      // Clear messages
      messageDiv.textContent = "";
      messageDiv.className = "";

      // Step 2: Extract form data using form.elements
      const { name, email } = form.elements;
      console.log("Captured inputs:", { name: name.value, email: email.value });

      // Basic validation
      if (!name.value.trim() || !email.value.trim()) {
        console.warn("Validation failed: Missing fields");
        messageDiv.textContent = "Please fill in all fields.";
        messageDiv.className = "error";
        return;
      }

      const payload = {
        name: name.value.trim(),
        email: email.value.trim(),
      };

      // Step 3: Log payload before sending
      console.log("Payload prepared for fetch:", payload);

      try {
        // Step 4: Simulate fetch with delayed response
        const response = await simulateFetchPost("https://example.com/api/register", payload);

        // Step 5: Log fetch response
        console.log("Fetch response received:", response);

        if (response.status === 200) {
          messageDiv.textContent = " Registration successful!";
          messageDiv.className = "success";
          form.reset();
        } else {
          throw new Error("Server returned an error");
        }
      } catch (error) {
        console.error("Fetch error:", error);
        messageDiv.textContent = "Registration failed. See console for details.";
        messageDiv.className = "error";
      }
    });

    // Simulate fetch POST with a delay and random success/fail
    function simulateFetchPost(url, data) {
      console.log("Simulate sending data to:", url);
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          const success = Math.random() > 0.3;
          if (success) {
            resolve({ status: 200, message: "Success" });
          } else {
            reject(new Error("Simulated server error"));
          }
        }, 1500);
      });
    }
  </script>

</body>
</html>
